#include <avr/io.h>

#include <avr/pgmspace.h>
#undef PROGMEM
#define PROGMEM __attribute__((section(".progmem.data")))

#define NUM_DEVICES     8	 // Number of cascaded max7219's, or just 1
#define DEL 		60000    // Delay for scrolling speed in microseconds

// Macros to set SS line LOW (selected) or HIGH (deselected)
#define SLAVE_SELECT    PORTD &= ~(1<<PD4)   // set off
#define SLAVE_DESELECT  PORTD |= (1<<PD4)    // set on

void print_string(char * message);
void print_char( unsigned char c);

unsigned char Ch_RAM_index ; 
unsigned char Caracter_RAM[65];

// Array holding arrays of 8 Bytes for each representation of an ASCII character, stored in flash

unsigned char FontLookup [ ][8] PROGMEM =
{
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},			// Space - Ascii 32
	{0x00,0x10,0x10,0x10,0x10,0x00,0x10,0x00},		    // !
	{0x00,0x24,0x24,0x00,0x00,0x00,0x00,0x00},			// ”
	{0x00,0x24,0x7E,0x24,0x24,0x7E,0x24,0x00},			// #
	{0x00,0x8,0x3E,0x28,0x3E,0xA,0x3E,0x8},				// $
	{0x00,0x62,0x64,0x8,0x10,0x26,0x46,0x00},			// %
	{0x00,0x10,0x28,0x10,0x2A,0x44,0x3A,0x00},			// &
	{0x00,0x8,0x10,0x00,0x00,0x00,0x00,0x00},			// ‘
	{0x00,0x4,0x8,0x8,0x8,0x8,0x4,0x00},				// (
	{0x00,0x20,0x10,0x10,0x10,0x10,0x20,0x00},			// )
	{0x00,0x00,0x14,0x8,0x3E,0x8,0x14,0x00},			// *
	{0x00,0x00,0x8,0x8,0x3E,0x8,0x8,0x00},				// +
	{0x00,0x00,0x00,0x00,0x00,0x8,0x8,0x10},			// ,
	{0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00},			// -
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00},			// .
	{0x00,0x2,0x4,0x8,0x10,0x20,0x40,0x00},				// /
	{0x00,0x3C,0x46,0x4A,0x52,0x62,0x3C,0x00},			// 0 - Ascii 48
	{0x00,0x30,0x50,0x10,0x10,0x10,0x7C,0x00},			// 1 == horizontal daata
	{0x00,0x3C,0x42,0x2,0x3C,0x40,0x7E,0x00},			// 2
	{0x00,0x3C,0x42,0xC,0x2,0x42,0x3C,0x00},			// 3
	{0x00,0x8,0x18,0x28,0x48,0x7E,0x8,0x00},			// 4
	{0x00,0x7E,0x40,0x7C,0x2,0x42,0x3C,0x00},			// 5
	{0x00,0x3C,0x40,0x7C,0x42,0x42,0x3C,0x00},			// 6
	{0x00,0x7E,0x2,0x4,0x8,0x10,0x10,0x00},				// 7
	{0x00,0x3C,0x42,0x3C,0x42,0x42,0x3C,0x00},			// 8
	{0x00,0x3C,0x42,0x42,0x3E,0x2,0x3C,0x00},			// 9
	{0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x00},			// : - Ascii 58
	{0x00,0x00,0x10,0x00,0x00,0x10,0x10,0x20},			//
	{0x00,0x00,0x4,0x8,0x10,0x8,0x4,0x00},				// <
	{0x00,0x00,0x00,0x3E,0x00,0x3E,0x00,0x00},			// =
	{0x00,0x00,0x10,0x8,0x4,0x8,0x10,0x00},				// >
	{0x00,0x3C,0x42,0x4,0x8,0x00,0x8,0x00},				// ?
	{0x00,0x3C,0x4A,0x56,0x5E,0x40,0x3C,0x00},			// @
	{0x00,0x3C,0x42,0x42,0x7E,0x42,0x42,0x00},			// A - Ascii 65
	{0x00,0x7C,0x42,0x7C,0x42,0x42,0x7C,0x00},			// B
	{0x00,0x3C,0x42,0x40,0x40,0x42,0x3C,0x00},			// C
	{0x00,0x78,0x44,0x42,0x42,0x44,0x78,0x00},			// D
	{0x00,0x7E,0x40,0x7C,0x40,0x40,0x7E,0x00},			// E
	{0x00,0x7E,0x40,0x7C,0x40,0x40,0x40,0x00},			// F
	{0x00,0x3C,0x42,0x40,0x4E,0x42,0x3C,0x00},			// G
	{0x00,0x42,0x42,0x7E,0x42,0x42,0x42,0x00},			// H
	{0x00,0x7C,0x10,0x10,0x10,0x10,0x7C,0x00},			// I
	{0x00,0x2,0x2,0x2,0x2,0x42,0x3C,0x00},				// J
	{0x00,0x44,0x48,0x70,0x48,0x44,0x42,0x00},			// K
	{0x00,0x40,0x40,0x40,0x40,0x40,0x7E,0x00},			// L
	{0x00,0x42,0x66,0x5A,0x42,0x42,0x42,0x00},			// M
	{0x00,0x42,0x62,0x52,0x4A,0x46,0x42,0x00},			// N
	{0x00,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00},			// O
	{0x00,0x7C,0x42,0x42,0x7C,0x40,0x40,0x00},			// P
	{0x00,0x3C,0x42,0x42,0x52,0x4A,0x3C,0x00},			// Q
	{0x00,0x7C,0x42,0x42,0x7C,0x44,0x42,0x00},			// R
	{0x00,0x3C,0x40,0x3C,0x2,0x42,0x3C,0x00},			// S
	{0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x00},			// T
	{0x00,0x42,0x42,0x42,0x42,0x42,0x3C,0x00},			// U
	{0x00,0x42,0x42,0x42,0x42,0x24,0x18,0x00},			// V
	{0x00,0x42,0x42,0x42,0x42,0x5A,0x24,0x00},			// W
	{0x00,0x42,0x24,0x18,0x18,0x24,0x42,0x00},			// X
	{0x00,0x44,0x28,0x10,0x10,0x10,0x10,0x00},			// Y
	{0x00,0x7E,0x4,0x8,0x10,0x20,0x7E,0x00},			// Z - Ascii 90
	{0x00,0xE,0x8,0x8,0x8,0x8,0xE,0x00},			    // {
	{0x00,0x00,0x40,0x20,0x10,0x8,0x4,0x00},			//\_
	{0x00,0x70,0x10,0x10,0x10,0x10,0x70,0x00},			// }
	{0x00,0x10,0x38,0x54,0x10,0x10,0x10,0x00},			// ^
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},		    // _
	{0x00,0x1C,0x22,0x78,0x20,0x20,0x7E,0x00},			// £
	{0x00,0x00,0x38,0x4,0x3C,0x44,0x3C,0x00},			// a - Ascii 97
	{0x00,0x40,0x40,0x78,0x44,0x44,0x78,0x00},			// b
	{0x00,0x00,0x38,0x40,0x40,0x40,0x38,0x00},			// c
	{0x00,0x4,0x4,0x3C,0x44,0x44,0x3C,0x00},			// d
	{0x00,0x00,0x38,0x44,0x78,0x40,0x3C,0x00},			// e
	{0x00,0x30,0x40,0x60,0x40,0x40,0x40,0x00},			// f
	{0x00,0x3C,0x44,0x44,0x3C,0x4,0x38,0x00},			// g
	{0x00,0x40,0x40,0x40,0x78,0x44,0x44,0x00},			// h
	{0x00,0x20,0x00,0x60,0x20,0x20,0x70,0x00},			// i
	{0x00,0x8,0x00,0x8,0x8,0x48,0x30,0x00},				// j
	{0x00,0x40,0x50,0x60,0x60,0x50,0x48,0x00},			// k
	{0x00,0x40,0x40,0x40,0x40,0x40,0x30,0x00},			// l
	{0x00,0x00,0x68,0x54,0x54,0x54,0x54,0x00},			// m
	{0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x00},		 	// n
	{0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00},			// o
	{0x00,0x78,0x44,0x44,0x78,0x40,0x40,0x00},			// p
	{0x00,0x3C,0x44,0x44,0x3C,0x4,0x6,0x00},			// q
	{0x00,0x00,0x1C,0x20,0x20,0x20,0x20,0x00},		 	// r
	{0x00,0x00,0x38,0x40,0x38,0x4,0x78,0x00},			// s
	{0x00,0x20,0x70,0x20,0x20,0x20,0x18,0x00},			// t
	{0x00,0x00,0x44,0x44,0x44,0x44,0x38,0x00},			// u
	{0x00,0x00,0x44,0x44,0x28,0x28,0x10,0x00},			// v
	{0x00,0x00,0x44,0x54,0x54,0x54,0x28,0x00},			// w
	{0x00,0x00,0x44,0x28,0x10,0x28,0x44,0x00},			// x
	{0x00,0x00,0x44,0x44,0x3C,0x4,0x38,0x00},			// y
	{0x00,0x00,0x7C,0x8,0x10,0x20,0x7C,0x00},			// z
	{0x00,0xE,0x8,0x30,0x8,0x8,0xE,0x00},				// {_
	{0x00,0x8,0x8,0x8,0x8,0x8,0x8,0x00},				// |_
	{0x00,0x70,0x10,0xC,0x10,0x10,0x70,0x00},			// }
	{0x00,0x14,0x28,0x00,0x00,0x00,0x00,0x00},			// ~
	{0x3C,0x42,0x99,0xA1,0xA1,0x99,0x42,0x3C},			// ©
	{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},			// Block Graphic 1
	{0xF,0xF,0xF,0xF,0xFF,0xFF,0xFF,0xFF},
	{0xF0,0xF0,0xF0,0xF0,0xFF,0xFF,0xFF,0xFF},
	{0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF},
	{0xFF,0xFF,0xFF,0xFF,0xF,0xF,0xF,0xF},
	{0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF},
	{0xF0,0xF0,0xF0,0xF0,0xF,0xF,0xF,0xF},
	{0x00,0x00,0x00,0x00,0xF,0xF,0xF,0xF},
	{0xFF,0xFF,0xFF,0xFF,0x55,0xAA,0x55,0xAA},
	{0xAA,0x55,0xAA,0x55,0xFF,0xFF,0xFF,0xFF},
	{0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55},			// Block Graphic 11
};

// Function Prototypes
void delay (int milisecond);
void ceas(void);
void initSPI(void);
void writeByte(uint8_t byte);
void writeWord(uint8_t address, uint8_t data);
void initMatrix(void);
void clearMatrix(void);
void displayBuffer(void);
void intitimmer(void);

void print_char( unsigned char c){
	unsigned char i;
	unsigned char temp;

	for ( i = 0; i < 8; i++ )
	{
		
		temp=(pgm_read_byte(&FontLookup[c - 32][i] ));
		Caracter_RAM[Ch_RAM_index]=temp;
		Ch_RAM_index=Ch_RAM_index+1;
		
	}
}


void print_string(char * message){
	Ch_RAM_index=0;
	while (*message){            // Look for end of string
		print_char(*message++);
	                }
}


